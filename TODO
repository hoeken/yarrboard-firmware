# GENERAL

# SENDIT

* dig into MCP3564R driver and figure out whats up with the strange readings
* maybe try continuous mode

# BRINEOMATIC

* test flow meters
* test pressure sensors
* test tds sensors
* test solenoids w/ real load
* test temperature sensor
* test servos

# v2.0.0 Release

* add a small text box for sending raw json commands
* settings page is ugly af.
    * borders for each config area like channels
    * side bar that loads each config page?
    * combine network and app config
        * move hostname from network to app
        * rename network to wifi
    * mqtt group
    * http server group
    * wifi group
    * users group
* find a way to bubble up setup errors - config, mqtt, etc.
    * use an error log and load it when we login (admin only)
* wifi improvements:
    * add a RollingAverage to wifi rssi
    * switch to using improvwifi: https://registry.platformio.org/libraries/improv/Improv
    * wifi should reconnect on failure?
    * wifi authentication fail should default to using improv wifi
    * switch to ap/sta mode and scan for list of ap's and put that in the dropdown.
    * when in ap mode and switching to client, go to ap/sta mode and make sure we can connect first.
    * let the client know and then reboot
* rgb status should have its own .h/.cpp file
    * wifi connection status?
* generic piezo buzzer support
    * preset tone variables as part of piezo class
    * passive just turns it on/off for the duration of the note
* signalk frothfet plugin - use key for paths instead of id
* signalk sendit plugin - use key for paths instead of id
* channel edit UI rewrite
    * consolidate all the client side error checking to a single function per channel type
        * add overlaps for standard channel stuff (name, key, etc.
    * send entire channel config in one object (update in-memory object, then send it)
    * consolidate all the server side error checking to a single place aka parseConfig()
    * save if no errors.
    * add edit key for each channel
* test/update/fix the release script for ota
* relaychannel -> move to boolean state only
* big cleanup of the javascript code:
    * basic YarrboardApp object
        * onConnect()
        * onMessage()
        * etc

# BRINEOMATIC

* update code for new Rev B board:
    * flowmeter and salinity rename to product_flowmeter and product_salinity
    * add support for brine_flowmeter and brine_salinity
    * what new stuff can we do with brine_flowmeter and brine_salinity?
        * verify the main pump is working based on brine flow
        * verify the diverter valve is working based on brine vs product flow
        * add total_flow variable and verify it during runtime in addition to product flow
        * use brine_salinity to flush until seawater is gone
    * add stepper motor support
        * pid control output becomes stepper motor angle set point.
        * might allow us to use the PID tuning code
        * need to redesign high pressure valve attachment
    * add support for the piezo on error or success.
        * can we play tunes?
* add mid-level commands to set_watermaker
    * boost_pump
    * high_pressure_pump
    * flush_valve
    * fan
    * diverter valve
* add mid level UI icons/commands for watermaker parts:
    * boost_pump
    * hp pump
    * diverter valve
    * flush valve
    * fan
    * membrane_pressure_target
    * advanced manual mode to set servos, stepper, etc.
* add configuration options for:
    * flowmeters - ppl
    * tds (can we autodetect - whats this look like?)
    * diverter valve
    * hp valve servo
    * hp valve relay
    * diverter valve relay
    * default intervals for flush, etc.
    * options for display units
    * timeouts
    * high/low values
* move everything to SI units, add configurable units
* add tds calibration
* PID calibration?
* ntp server and next flush being an actual time that is stored in preferences (survive reboot)
* move brineomatic to interrupt based adc
* add simple HA support to brineomatic?
    * on/off switch to start/stop the watermaker
    * sensors for each output type...

# FROTHFET

* fading code
    * saveThrottledDutyCycle needs reworked
* slow vs fast blow
    * fast checks getLatestReading()
    * slow checks getAverageReading()
* add temperature, vdd support to adc library
* update forms to be consistent style (float labels)
* update yarrboard client if any changes needed - probably for state
* update signalk plugin - same
* go through and re-adjust the various page sizes for our different viewports
* protocol documentation
* Rev E: add LED color support to new ws2818b channel leds.
* add buzzer support - enable alarms for tripped or bypassed on a per-channel basis
* update current adc define for new chip

# SENDIT

* change adc driver to MCP3564
* remove 1k pullup option, change to passthru
* add piezo buzzer support?
    * probaby best to do in node red
* set the device_type a bit more intelligently based on our config.  

# LONG TERM:

* global cleanup of strcpy, sprintf, etc.
* espwebtools?  https://esphome.github.io/esp-web-tools/
* yarrboard c++ framework
    * create YarrboardApp class
    * move channel headers/classes to a channels/ folder
    * rename foo_channel to FooChannel to match class names
    * something something config
    * setLogo() or #define to set the logo file
    * create callbacks:
        * onSetup() - main.cpp
        * onLoop() - main.cpp
        * onInit() - prefs.cpp
        * onGenerateConfig() - prefs.cpp
        * onLoadConfig() - prefs.cpp
        * onMQTTUpdate() - mqtt.cpp
        * onHADiscovery() - mqtt.cpp
        * onUpdate() - protocol.cpp
        * onFastUpdate() - protocol.cpp
        * onStats() - protocol.cpp
        * onMessage() - gets called for every single message
        * registerNobodyCommand("command", callback);
        * registerGuestCommand("command", callback);
        * registerAdminCommand("command", callback);
    * for looping only stuff it would be best to do something like this:
        * yba.registerChannels(channels);
        * yba.registerMQTTChannels(channels);
        * yba.registerHAChannels(channels);
* yarrboard javascript framework
    * move most of the logic to a YarrboardUI class
    * generic event handlers:
        * onMessage()
        * onUpdate()
        * onConfig()
        * onPageOpen()
    * basechannel / extension classes
        * test and roll out the new class code
* other MFD integrations:
    * garmin?
    * raymarine?
* refactor yarrboard-firmware into something separate from frothfet / brineomatic / sendit:
    * what is the structure?
        * c++ code side: library with lots of callbacks?
        * javascript side: javascript include with lots of callbacks?
        * html???

# B&G MFD Dev Info
B&G : User Agent: Mozilla/5.0 (X11; Linux aarch64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.12.9 Chrome/69.0.3497.128 Safari/537.36
https://ungoogled-software.github.io/ungoogled-chromium-binaries/releases/linux_portable/64bit/