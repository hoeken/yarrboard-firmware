# GENERAL

* change over to a single json file for configuration.  easy to backup / deploy
    * the various config load/save/parse functions should also pass the size of the error string.
    * allow drag/drop to load config file
    * reset to factory should wipe LittleFS or at least our config file
    * longer term, editing channel should:
        * send entire config in command
        * run it through the same parseConfig()
        * save if no errors.
        * we can consolidate all the error checking to a single place aka parseConfig()

* add "keys" to each channel config 32 chars, ([A-Za-z0-9_]+ only)
    * getChannelByKey(key, channels);
    * allow passing that instead of id
    * use that in place of ids in most places

* mqtt
    * move all mqtt calls to mqtt.cpp, channels just create their json payloads
    * test when host is unreachable... shouldnt keep sending
    * add config to enable mqqt
    * add config to enable HA discovery
    * add per-channel flag to include in HA?
    * add generic ha discovery stubs to BaseChannel
    * add simple HA support to brineomatic?

* upgrade to esp-idf 5.1.x and fix any issues
* upgrade to PsychicHttp 2.0
* clean up #includes and libraries
* add wifi RSSI bars indicator
* wifi improvements:
    * wifi connection fail should default to AP mode
    * wifi should reconnect on failure
* rgb status should have its own .h/.cpp file
    * wifi connection status?
* generic piezo buzzer support
    * on / off / frequency? / preset tones or songs?
    * add a #define to boards to set passive vs active piezo mode

# BRINEOMATIC

* update code for new Rev B board:
    * flowmeter and salinity rename to product_flowmeter and product_salinity
    * add support for brine_flowmeter and brine_salinity
    * what new stuff can we do with brine_flowmeter and brine_salinity?
        * verify the main pump is working based on brine flow
        * verify the diverter valve is working based on brine vs product flow
        * add total_flow variable and verify it during runtime in addition to product flow
        * use brine_salinity to flush until seawater is gone
    * add stepper motor support
        * pid control output becomes stepper motor angle set point.
        * might allow us to use the PID tuning code
        * need to redesign high pressure valve attachment
    * add support for the piezo on error or success.
        * can we play tunes?
    * turn off diverter valve servo after ~10 seconds after command to prevent overheating
* add mid-level commands to set_watermaker
    * boost_pump
    * high_pressure_pump
    * flush_valve
    * fan
    * membrane_pressure_target
* add mid level UI icons/commands for watermaker parts:
    * boost_pump
    * hp pump
    * diverter valve
    * flush valve
    * fan
    * advanced manual mode to set servos, stepper, etc.
* add configuration options for:
    * flowmeters
    * tds (can we autodetect - whats this look like?)
    * diverter valve
    * hp valve servo
    * hp valve relay
    * diverter valve relay
    * default intervals for flush, etc.
    * options for display units
    * timeouts
    * high/low values
* move everything to SI units, add configurable units
* add tds calibration
* PID calibration?
* ntp server and next flush being an actual time that is stored in preferences (survive reboot)

# FROTHFET

* add inrush current to pwm / soft fuse checking - will need a stateChangeTime variable too...
* double check that pwm is not getting set if isDimmable is false
* convert ADC to continuous interrupt driven style
* add temperature, vdd support to adc library
* update forms to be consistent style (float labels)
* update yarrboard client if any changes needed - probably for state
* update signalk plugin - same
* go through and re-adjust the various page sizes for our different viewports
* protocol documentation
* add mppt support:
    * homeassistant "light" for consolidated dashboard control
    * option to receive json commands over mppt?
* Rev E: add LED color support to new ws2818b channel leds.
* add buzzer support - enable alarms for tripped or bypassed on a per-channel basis
* update fan control to simple on/off and remove any old pwm code for that
* update current adc define for new chip
* voltage reading average during pwm / fuse blown detection is broken during that time...

# SENDIT

* change adc driver to MCP3564
* remove 1k pullup option, change to passthru
* add piezo buzzer support?
    * probaby best to do in node red
* set the device_type a bit more intelligently based on our config.  

# LONG TERM:

* global cleanup of strcpy, sprintf, etc.
* espwebtools?  https://esphome.github.io/esp-web-tools/
* Look into turning yarrboard UI/framework into a library for use in other projects (brineomatic)
* other MFD integrations:
    * garmin?
    * raymarine?
* refactor yarrboard-firmware into something separate from frothfet / brineomatic / sendit:
    * what is the structure?
        * c++ code side: library with lots of callbacks?
        * javascript side: javascript include with lots of callbacks?
        * html???