Firmware:
    * mongoose conversion
        * figure out why inital load isnt as snappy
        * long term: update to mongoose 7.x
    * web ui
        * static height on switches / led / analog rows
        * add a total row to the mosfet stats page
    * ssl
        * need to upgrade to latest mongoose before going further
        * explore using letsencrypt
    * find in signalk app where it sends the discovery info to mfd's and see if we can copy?
        * I think the magic happens here: https://github.com/SignalK/signalk-server/blob/master/src/interfaces/mfd_webapp.ts
    * protocol documentation
    * learn about building components for node-red, maybe make a yarrboard toolkit
    * more ui work and column sizing

8ch MOSFET:
    * remove CAN port - never going to use it.
    * change fan2 tach to pin 4
    * combine fan 1 pwm and fan 2 pwm to pin 16
    * add voltage detector to each channel for run detection - another mcp3208 + bus voltage divider circuit
    * maybe switch to "pcb welding terminal" connection like 74650073R or C5370858 or C3029538
        * or at least a 9.5mm pitch barrier terminal like C496131 or C430699 or C430687 or C707586
    * move to 4 layer design signal / gnd / gnd / signal

RGB Input:
    * move to 4 layer design signal / gnd / gnd / signal
    * remove the MISO line completely, doesnt work.

Electronics:
    * update 3dp case for 8ch mosfet
    * design case for input board
    * design case for button board

Long Term Maybe?
    * Relay board - DC or AC?
    * Motor driver / H bridge?




Webserver Comparison:
    * arduinomongoose: https://github.com/jeremypoulter/ArduinoMongoose
        * simple programmatic interface
        * mongoose is a large commercial project
        * supports https and websockets
        * looks to be actively developed
        * issues:
            * no equivalent of sending a spiffs/littlefs file
        * Not ASYNC, but close with fast polling
    * espasyncwebserver
        * NO SSL SUPPORT
        * tends to crash over time
        * easy to understand API
        * Async, so very responsive
            * https://github.com/me-no-dev/ESPAsyncWebServer/issues/1183
            * https://github.com/Bmooij/AsyncTCP-https-server-example
            * https://github.com/yubox-node-org/AsyncTCPSock
    * espressif http server
        * should be pretty reliable... lot of time investment to find out though
        * supports https and sockets
        * really cryptic programming style - basically have to roll your own server
        * https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/protocols/esp_https_server.html
        * https://github.com/espressif/esp-idf/tree/master/examples/protocols/https_server/wss_server
    * mongoose
        * should be pretty reliable... lot of time investment to find out though
        * supports https and sockets
        * somewhat cryptic and low level interface